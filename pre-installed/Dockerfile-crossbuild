ARG PYTHON_VERSION_SHORT=3.5
ARG OPENCV_VERSION=4.0.0
ARG CPU_CORES=4

# download qemu-user-static for amd64
# to build and run on x86_64 (requires binfmt_misc)
FROM ubuntu as x86_64
RUN set -e; \
    apt-get update; \
    apt-get install -y --no-install-recommends qemu-user-static; \
    rm -rf /var/lib/apt/lists/*

FROM arm32v7/python:${PYTHON_VERSION_SHORT}-stretch
COPY --from=x86_64 /usr/bin/qemu-*-static /usr/bin/

ARG DEBIAN_FRONTEND=noninteractive

# install opencv3 as detailied in: https://www.pyimagesearch.com/2017/09/04/raspbian-stretch-install-opencv-3-python-on-your-raspberry-pi/

# update apt
RUN set -e; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
      apt-utils \
      build-essential \
      cmake \
      pkg-config \
      unzip \
      wget \
      libjpeg-dev \
      libpng-dev \
      libtiff-dev \
      libavcodec-dev \
      libavformat-dev \
      libswscale-dev \
      libv4l-dev \
      libxvidcore-dev \
      libx264-dev \
      libgtk-3-dev \
      libcanberra-gtk* \
      libatlas-base-dev \
      gfortran; \
    rm -rf /var/lib/apt/lists/*

RUN pip install numpy

ARG OPENCV_VERSION
ENV OPENCV_VERSION=$OPENCV_VERSION

# download latest source & contrib
RUN set -e; \
    cd /tmp; \
    wget -c -nv -O opencv.zip https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip; \
    unzip opencv.zip; \
    wget -c -nv -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/$OPENCV_VERSION.zip; \
    unzip opencv_contrib.zip

ARG PYTHON_VERSION_SHORT
ENV PYTHON_VERSION=$PYTHON_VERSION_SHORT

ARG CPU_CORES
ENV CPU_CORES=$CPU_CORES

# build opencv
RUN set -e; \
    cd /tmp/opencv-$OPENCV_VERSION; \
    mkdir build; \
    cd build; \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
        -D CMAKE_INSTALL_PREFIX=/opt/opencv-build-$OPENCV_VERSION \
        -D OPENCV_EXTRA_MODULES_PATH=/tmp/opencv_contrib-$OPENCV_VERSION/modules \
        -D BUILD_PYTHON_SUPPORT=ON \
        -D BUILD_NEW_PYTHON_SUPPORT=ON \
        -D PYTHON_EXECUTABLE=$(which python${PYTHON_VERSION}) \
        -D PYTHON_INCLUDE_DIR=$(python${PYTHON_VERSION} -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
        -D PYTHON_PACKAGES_PATH=$(python${PYTHON_VERSION} -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
        -D BUILD_EXAMPLES=OFF \
        -D INSTALL_C_EXAMPLES=OFF \
        -D INSTALL_PYTHON_EXAMPLES=OFF \
        ..; \
    make -j$CPU_CORES; \
    make install; \
    ldconfig; \
    make clean; \
    cd /tmp; \
    rm -rf /tmp/*; \
    bash -c 'ln -s /usr/local/python/cv2/python-${PYTHON_VERSION}/cv2.cpython-${PYTHON_VERSION/./}m-arm-linux-gnueabihf.so /usr/local/lib/python${PYTHON_VERSION}/site-packages/cv2.so'

CMD ["/bin/bash"]

